// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// ll_sum
long double ll_sum(NumericVector index, NumericVector Zg1, NumericVector Zg0, NumericVector prior);
RcppExport SEXP _tadaA_ll_sum(SEXP indexSEXP, SEXP Zg1SEXP, SEXP Zg0SEXP, SEXP priorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type index(indexSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Zg1(Zg1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Zg0(Zg0SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prior(priorSEXP);
    rcpp_result_gen = Rcpp::wrap(ll_sum(index, Zg1, Zg0, prior));
    return rcpp_result_gen;
END_RCPP
}
// cal1
long double cal1(List x, NumericVector selected_annotations, NumericVector all_rr);
RcppExport SEXP _tadaA_cal1(SEXP xSEXP, SEXP selected_annotationsSEXP, SEXP all_rrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type selected_annotations(selected_annotationsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type all_rr(all_rrSEXP);
    rcpp_result_gen = Rcpp::wrap(cal1(x, selected_annotations, all_rr));
    return rcpp_result_gen;
END_RCPP
}
// cal2
long double cal2(List x);
RcppExport SEXP _tadaA_cal2(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cal2(x));
    return rcpp_result_gen;
END_RCPP
}
// sumall1
NumericVector sumall1(List DATA, NumericVector selected_annotations, NumericVector all_rr);
RcppExport SEXP _tadaA_sumall1(SEXP DATASEXP, SEXP selected_annotationsSEXP, SEXP all_rrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type DATA(DATASEXP);
    Rcpp::traits::input_parameter< NumericVector >::type selected_annotations(selected_annotationsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type all_rr(all_rrSEXP);
    rcpp_result_gen = Rcpp::wrap(sumall1(DATA, selected_annotations, all_rr));
    return rcpp_result_gen;
END_RCPP
}
// sumall0
NumericVector sumall0(List DATA);
RcppExport SEXP _tadaA_sumall0(SEXP DATASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type DATA(DATASEXP);
    rcpp_result_gen = Rcpp::wrap(sumall0(DATA));
    return rcpp_result_gen;
END_RCPP
}
// post
NumericVector post(NumericVector index, NumericVector Zg1, NumericVector Zg0, NumericVector prior);
RcppExport SEXP _tadaA_post(SEXP indexSEXP, SEXP Zg1SEXP, SEXP Zg0SEXP, SEXP priorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type index(indexSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Zg1(Zg1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Zg0(Zg0SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prior(priorSEXP);
    rcpp_result_gen = Rcpp::wrap(post(index, Zg1, Zg0, prior));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_tadaA_ll_sum", (DL_FUNC) &_tadaA_ll_sum, 4},
    {"_tadaA_cal1", (DL_FUNC) &_tadaA_cal1, 3},
    {"_tadaA_cal2", (DL_FUNC) &_tadaA_cal2, 1},
    {"_tadaA_sumall1", (DL_FUNC) &_tadaA_sumall1, 3},
    {"_tadaA_sumall0", (DL_FUNC) &_tadaA_sumall0, 1},
    {"_tadaA_post", (DL_FUNC) &_tadaA_post, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_tadaA(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
